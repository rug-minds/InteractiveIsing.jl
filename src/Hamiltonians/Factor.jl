"""
Main function that generated the expression for the energy factor term
This factor is used for the generated function below
The reason this is a seperate function is for debugging
"""

const unweighted_expr = "-gstate[connIdx(conn)]"
const weighted_expr = "-connW(conn)*gstate[connIdx(conn)]"
const mag_expr = "-bfield(g)[idx]"

function getEFacExpr(stype::Type{<:SType}) 
    weighted = getSParam(stype, :Weighted)
    magfield =  getSParam(stype, :Magfield)

    expr = "begin
        efactor = Float32(0)
        @inbounds @fastmath @simd for conn_idx in eachindex(gadj[idx])
            conn = gadj[idx][conn_idx]
            efactor += $(weighted ? weighted_expr : unweighted_expr) 
        end
        return efactor $(magfield*mag_expr)
    end"

    return Meta.parse(expr)
end
getEFacExpr(stype::SType) = getEFacExpr(Type{stype})
export getEFacExpr

function getEFacExpr(htype::Type{HType{Symbs,Vals}}) where {Symbs, Vals}
    weighted = getHParamType(htype, :Weighted)
    # clamp = getHParamType(htype, :Clamp)
    magfield =  getHParamType(htype, :Magfield)

    expr = "begin
        efactor = Float32(0)
        @inbounds @simd for conn_idx in eachindex(gadj[idx])
            conn = gadj[idx][conn_idx]
            efactor += $(weighted ? weighted_expr : unweighted_expr) 
        end
        return efactor $(magfield*mag_expr)
    end"



    return Meta.parse(expr)
end
getEFacExpr(htype::HType{Symbs,Vals}) where {Symbs, Vals} = getEFacExpr(typeof(htype))
getEFacExpr(tp::Type{Type{T}}) where T = getEFacExpr(T)
export getEFacExpr


#= Main Energy Factor Function =#
"""
Get the energy factor (where we define E === σ_i Σ_j fac_j) for the state
the function is dispatched on the graph g, the idx i and the type of the Hamiltonian
which may be generated by the function HType(Symbs...).
"""
@generated function getEFactor(g, gstate, gadj, idx, htype::HType{Symbs,Vals} = htype(g))::Float32 where {Symbs, Vals}

    exp = getEFacExpr(htype)

    return exp
end

@generated function getEFactor(g, gstate, gadj, idx, stype::SType)::Float32

    exp = getEFacExpr(stype)

    return exp
end

# @generated function getEFactor(gstate, gadj, idx, htype::HType{Symbs,Vals})::Float32 where {Symbs, Vals}

#     exp = getEFacExpr(htype)

#     return exp
# end
export getEFactor